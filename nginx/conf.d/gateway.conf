# API Gateway Server Configuration

# HTTP server - redirect to HTTPS
server {
    listen 80;
    server_name _;

    # Health check endpoint (HTTP allowed)
    location /health {
        access_log off;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601"}';
        add_header Content-Type application/json;
    }

    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# HTTPS server - main gateway
server {
    listen 443 ssl;
    http2 on;
    server_name _;

    # TLS/SSL Configuration
    ssl_certificate /etc/nginx/certs/server.crt;
    ssl_certificate_key /etc/nginx/certs/server.key;

    # Modern SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # OCSP stapling (requires valid CA-signed certificates)
    # Uncomment when using production certificates
    # ssl_stapling on;
    # ssl_stapling_verify on;

    # Metrics endpoint (internal access only)
    location /metrics {
        access_log off;
        # Restrict to internal networks
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        content_by_lua_file /etc/nginx/lua/metrics.lua;
    }

    ################################################
    ############# Add your routes here #############
    ################################################
    #
    # location /api/v1/my-service {
    #     set $route_name "my_service";
    #     access_by_lua_file /etc/nginx/lua/rate_limiter.lua;
    #     rewrite_by_lua_file /etc/nginx/lua/circuit_breaker.lua;
    #     proxy_pass http://my_service;
    #     include /etc/nginx/conf.d/proxy_params.conf;
    #     proxy_intercept_errors on;
    #     error_page 502 503 504 = @circuit_open;
    # }

    # Market Service
    location /api/v1/market {
        set $route_name "market";
        access_by_lua_file /etc/nginx/lua/rate_limiter.lua;
        rewrite_by_lua_file /etc/nginx/lua/circuit_breaker.lua;
        log_by_lua_file /etc/nginx/lua/circuit_breaker_log.lua;
        proxy_pass http://market_service;
        include /etc/nginx/conf.d/proxy_params.conf;
        proxy_intercept_errors on;
        error_page 502 503 504 = @circuit_open;
    }

    # Order Service - Critical, multiple instances, stricter rate limit
    location /api/v1/orders {
        set $route_name "orders";
        access_by_lua_file /etc/nginx/lua/rate_limiter.lua;
        rewrite_by_lua_file /etc/nginx/lua/circuit_breaker.lua;
        log_by_lua_file /etc/nginx/lua/circuit_breaker_log.lua;
        proxy_pass http://order_service;
        include /etc/nginx/conf.d/proxy_params.conf;
        proxy_intercept_errors on;
        error_page 502 503 504 = @circuit_open;
    }
    
    # Portfolio Service
    location /api/v1/portfolio {
        set $route_name "portfolio";
        access_by_lua_file /etc/nginx/lua/rate_limiter.lua;
        rewrite_by_lua_file /etc/nginx/lua/circuit_breaker.lua;
        log_by_lua_file /etc/nginx/lua/circuit_breaker_log.lua;
        proxy_pass http://portfolio_service;
        include /etc/nginx/conf.d/proxy_params.conf;
        proxy_intercept_errors on;
        error_page 502 503 504 = @circuit_open;
    }

    # Circuit breaker error handler (for 502/503/504 errors)
    location @circuit_open {
        internal;
        content_by_lua_block {
            local route = ngx.var.route_name or "unknown"
            local circuit_dict = ngx.shared.circuit_breaker
            local config = _G.gateway.config.circuit_breaker
            local now = ngx.now()

            -- Calculate retry_after
            local open_time = circuit_dict:get("cb:" .. route .. ":open_time") or now
            local retry_after = math.ceil(config.timeout - (now - open_time))
            if retry_after < 0 then retry_after = 0 end

            ngx.status = 503
            ngx.header["Content-Type"] = "application/json"
            ngx.header["Retry-After"] = retry_after
            ngx.say('{"error":"Service temporarily unavailable","code":"CIRCUIT_OPEN","retry_after":' .. retry_after .. '}')
        }
    }

    # Default 404 for unmatched routes
    location / {
        return 404 '{"error":"Route not found","code":"NOT_FOUND"}';
        add_header Content-Type application/json;
    }
}
