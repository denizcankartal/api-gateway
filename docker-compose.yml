services:
  # Traefik API Gateway
  gateway:
    image: traefik:v3.1
    container_name: api-gateway
    ports:
      - "80:80"      # HTTP
      - "443:443"    # HTTPS
      - "8080:8080"  # Dashboard and metrics
    volumes:
      # Mount Traefik configuration
      - ./traefik/config/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./traefik/config/dynamic.yml:/etc/traefik/dynamic.yml:ro
      # Mount TLS certificates
      - ./traefik/certs:/etc/traefik/certs:ro
      # Mount logs directory
      - ./logs:/var/log/traefik
      # Docker socket for service discovery
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - gateway-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 128M
    depends_on:
      market-service:
        condition: service_healthy
      market-service-2:
        condition: service_healthy
      order-service:
        condition: service_healthy
      order-service-2:
        condition: service_healthy
      portfolio-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Backend Services (same as before)

  # Market Service - Instance 1
  market-service:
    image: mendhak/http-https-echo:31
    container_name: market-service
    environment:
      - HTTP_PORT=8080
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  # Market Service - Instance 2
  market-service-2:
    image: mendhak/http-https-echo:31
    container_name: market-service-2
    environment:
      - HTTP_PORT=8080
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  # Order Service - Instance 1
  order-service:
    image: mendhak/http-https-echo:31
    container_name: order-service
    environment:
      - HTTP_PORT=8080
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  # Order Service - Instance 2
  order-service-2:
    image: mendhak/http-https-echo:31
    container_name: order-service-2
    environment:
      - HTTP_PORT=8080
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

  # Portfolio Service
  portfolio-service:
    image: mendhak/http-https-echo:31
    container_name: portfolio-service
    environment:
      - HTTP_PORT=8080
    networks:
      - gateway-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M

networks:
  gateway-network:
    driver: bridge
